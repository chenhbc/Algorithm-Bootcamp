/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // 校验参数，如果为空直接返回
        if (l1 == null) return l2;
        if (l2 == null) return l1;

        // 定义一个前置节点
        ListNode nodePrev = new ListNode(-1);
        ListNode node = nodePrev;

        // 结束的条件是 l1 或者 l2 为空，那么另一个链表的剩余节点保持不变即可
        while(l1 != null && l2 != null) {
            // 比较大小，重新链接链表节点
            if (l1.val <= l2.val) {
                node.next = l1;
                l1 = l1.next;
            } else {
                node.next = l2;
                l2 = l2.next;
            }
            node = node.next;
        }

        // 循环结束，说明某个链表已经为空了，那么把另一个链表的节点指过来即可
        node.next = l1 == null ? l2 : l1;

        return nodePrev.next;
    }
}
